<?php

namespace Pequiven\SEIPBundle\Repository;

use Pequiven\SEIPBundle\Entity\User;
use Tecnocreaciones\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository;

/**
 * Repositorio del usuario
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * Retornar los usuario a los cuales le puedo asignar programas de gestion tacticos
     * @return type
     */
    function findQueryToAssingTacticArrangementProgram(){
        $qb = $this->getQueryBuilder();
        $user = $this->getUser();
        $level = $user->getLevelRealByGroup();
        $qb
            ->innerJoin('u.groups','g')
            ->andWhere($qb->expr()->orX('g.level <= :level','u.id = :user'))
            ->andWhere('g.level >= :minLevel')
            ->andWhere('g.typeRol = :typeRol')
            ->setParameter('level', $level)
            ->setParameter('minLevel', \Pequiven\MasterBundle\Entity\Rol::ROLE_WORKER_PQV)
            ->setParameter('user', $user)
            ->setParameter('typeRol', \Pequiven\MasterBundle\Entity\Rol::TYPE_ROL_OWNER)
            ;
        if($level == \Pequiven\MasterBundle\Entity\Rol::ROLE_DIRECTIVE){
            $qb
                ->andWhere($qb->expr()->isNotNull('u.gerencia'))
                ->andWhere("u.gerencia != ''")
                ;
        }else{
            $qb
                ->andWhere('u.gerencia = :gerencia')
                ->setParameter('gerencia', $user->getGerencia())
                ;
        }
        return $qb;
    }
    
    /**
     * Retornar los usuario a los cuales le puedo asignar metas de un programa de gestion tactico
     * @return type
     */
    function findQueryToAssingTacticArrangementProgramGoal(array $users){
        $qb = $this->getQueryBuilder();
        $level = 0;
        $usersId = array();
        foreach ($users as $user) {
            if($user->getLevelRealByGroup() > $level){
                $level = $user->getLevelRealByGroup();
            }
            $usersId[] = $user->getId();
        }
        $qb
            ->innerJoin('u.groups','g')
            ->andWhere($qb->expr()->orX('g.level <= :level',$qb->expr()->in('u.id', $usersId)))
//            ->andWhere('u.gerencia = :gerencia')
            ->andWhere('g.typeRol = :typeRol')
            ->setParameter('level', $level)
            ->setParameter('typeRol', \Pequiven\MasterBundle\Entity\Rol::TYPE_ROL_OWNER)
//            ->setParameter('gerencia', $user->getGerencia())
            ;
        return $qb;
    }
    
    /**
     * Retornar los usuario a los cuales le puedo asignar metas de un programa de gestion tactico
     * @return type
     */
    function findToAssingTacticArrangementProgramGoal(array $users){
        return $this->findQueryToAssingTacticArrangementProgramGoal($users)->getQuery()->getResult();
    }
    
    function findUsers(array $responsiblesId) {
        $qb = $this->getQueryBuilder();
        $qb
           ->addSelect('g')
           ->innerJoin('u.groups', 'g')
           ->andWhere($qb->expr()->in('u.id', $responsiblesId))
           ->andWhere('u.enabled = :enabled')
           ->setParameter('enabled', true)
            ;
        return $qb->getQuery()->getResult();
    }
    
    function findUsersByCriteria(array $criteria = array()) {
        return $this->findQueryUsersByCriteria($criteria)->getQuery()->getResult();
    }
    
    function findQueryUsersByCriteria(array $criteria = array()) {
        $qb = $this->getQueryBuilder();
        $qb
           ->addSelect('g')
           ->innerJoin('u.groups', 'g')
           ->andWhere('u.enabled = :enabled')
           ->andWhere('g.typeRol = :typeRol')
           ->setParameter('enabled', true)
           ->setParameter('typeRol', \Pequiven\MasterBundle\Entity\Rol::TYPE_ROL_OWNER)
            ;
        $qb
            ->andWhere('g.level <= :level')
            ->setParameter('level', \Pequiven\MasterBundle\Entity\Rol::ROLE_DIRECTIVE);
        return $qb;
    }
    
    /**
     * Crea un paginador para los usuarios
     * 
     * @param array $criteria
     * @param array $orderBy
     * @return QueryBuilder
     */
    function createPaginatorUser(array $criteria = null, array $orderBy = null) {
        $queryBuilder = $this->getCollectionQueryBuilder();
        $queryBuilder->leftJoin('u.groups', 'gr');
        $queryBuilder->leftJoin('u.complejo', 'c');
        $queryBuilder->leftJoin('u.gerencia', 'g');
        $queryBuilder->leftJoin('u.gerenciaSecond', 'gs');
        $queryBuilder->andWhere('gr.typeRol =:typeRol');
        $queryBuilder->setParameter('typeRol', 0);
        
        if(isset($criteria['firstname'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('u.firstname', "'%".$criteria['firstname']."%'"));
        }
        if(isset($criteria['lastname'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('u.lastname', "'%".$criteria['lastname']."%'"));
        }
        if(isset($criteria['username'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('u.username', "'%".$criteria['username']."%'"));
        }
        if(isset($criteria['numPersonal'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('u.numPersonal', "'%".$criteria['numPersonal']."%'"));
        }
        if(isset($criteria['complejo'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('c.description', "'%".$criteria['complejo']."%'"));
        }
        if(isset($criteria['gerencia'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('g.description', "'%".$criteria['gerencia']."%'"));
        }
        if(isset($criteria['gerenciaSecond'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('gs.description', "'%".$criteria['gerenciaSecond']."%'"));
        }
        if(isset($criteria['role'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('gr.description', "'%".$criteria['role']."%'"));
        }
        
        return $this->getPaginator($queryBuilder);
    }
    
    /**
     * Crea un paginador para los usuarios
     * 
     * @param array $criteria
     * @param array $orderBy
     * @return QueryBuilder
     */
    function createPaginatorUserAux(array $criteria = null, array $orderBy = null) {
        $queryBuilder = $this->getCollectionQueryBuilder();
        $queryBuilder->leftJoin('u.groups', 'gr');
        $queryBuilder->leftJoin('u.complejo', 'c');
        $queryBuilder->leftJoin('u.gerencia', 'g');
        $queryBuilder->leftJoin('u.gerenciaSecond', 'gs');
        $queryBuilder->andWhere('gr.typeRol =:typeRol');
        $queryBuilder->setParameter('typeRol', 1);
        
        if(isset($criteria['firstname'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('u.firstname', "'%".$criteria['firstname']."%'"));
        }
        if(isset($criteria['lastname'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('u.lastname', "'%".$criteria['lastname']."%'"));
        }
        if(isset($criteria['username'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('u.username', "'%".$criteria['username']."%'"));
        }
        if(isset($criteria['numPersonal'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('u.numPersonal', "'%".$criteria['numPersonal']."%'"));
        }
        if(isset($criteria['complejo'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('c.description', "'%".$criteria['complejo']."%'"));
        }
        if(isset($criteria['gerencia'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('g.description', "'%".$criteria['gerencia']."%'"));
        }
        if(isset($criteria['gerenciaSecond'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('gs.description', "'%".$criteria['gerenciaSecond']."%'"));
        }
        if(isset($criteria['role'])){
            $queryBuilder->andWhere($queryBuilder->expr()->like('gr.description', "'%".$criteria['role']."%'"));
        }
        
        return $this->getPaginator($queryBuilder);
    }
    
    protected function getAlias() {
        return 'u';
    }
}
