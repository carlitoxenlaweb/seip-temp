{% extends "PequivenSEIPBundle:Template:ExtJs/layout.html.twig" %}

{% trans_default_domain 'PequivenSEIPBundle' %}

{% block stylesheet %}
    {{ parent() }}
    
    <style type="text/css" media="screen">
        .x-grid-row-summary .x-grid-cell-inner {
            font-weight: bold;
        }
        .icon-grid {
            background: url(../shared/icons/fam/grid.png) no-repeat 0 -1px;
        }
        .x-group-hd-container {
            display:none;
        }
        /* Tags */
        .tag {
            padding: 0 4px 2px;
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;
	}
	.ie9 .tag {
		padding: 1px 4px;
	}
	small.tag {
		font-size: 10px;
		line-height: 14px;
		text-transform: uppercase;
		padding: 0 2px;
		vertical-align: 1px;
		border-width: 1px;
		border-style: solid;
		-webkit-border-radius: 3px;
		-moz-border-radius: 3px;
		border-radius: 3px;
	}
        
    </style>
    <link rel="stylesheet" href="{{ asset('bundles/tecnocreacionesvzlagovernment/template/developer/css/colors3860.css?v=1') }}">
{% endblock %}

{% block javascript %}
    <script type="text/javascript">
        var formatPhp = "Y-m-d H:i:s";
        Ext.require([
            'Ext.grid.*',
            'Ext.data.*',
            'Ext.form.field.Number',
            'Ext.form.field.Date',
            'Ext.layout.container.Fit'
        ]);
        
        Ext.onReady(function(){
            var store = Ext.create('Ext.data.Store', {
                autoLoad: true,
                autoSync: true,
                model: 'Pequiven.IndicatorBundle.Entity.Indicator.ValueIndicator.Detail.ProductDetailDailyMonth',
                groupField: 'productTypeOf',
                proxy: {
                    type: 'rest',
                    url: '{{ path('pequiven_value_indicator_show_detail',{id:app.request.get('id'),_format:'json',numResult: app.request.get('numResult') }) }}',
                    reader: {
                        type: 'json',
                        rootProperty: 'data'
                    },
                    writer: {
                        type: 'json'
                    },
                    actionMethods: {
                        update: 'POST'
                    }
                },
                listeners: {
                    write: function (store, operation) {
                        var record = operation.getRecords()[0],
                                name = Ext.String.capitalize(operation.action),
                                verb;
                        if (name == 'Destroy') {
                            verb = 'Destroyed';
                        } else {
                            verb = name + 'd';
                        }

                        },
                        update: function (store, record, operation, modifiedFieldNames, eOpts) {
                            if (Ext.data.Model.EDIT == operation) {
                                store.getProxy().setExtraParam("_method", "PUT");
                            } else if (Ext.data.Model.COMMIT == operation) {
                                delete store.getProxy().getExtraParams()["_method"];
                            }
                        }
                    }
                });
                
            var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
                clicksToEdit: 1,
                listeners: {
                    cancelEdit: function (rowEditing, context) {
                        // Canceling editing of a locally added, unsaved record: remove it
                        if (context.record.phantom) {
                            store.remove(context.record);
                        }
                    },
                }
            });
                
            var widthColumnDays = 50;
            var fieldTypeDayProperties = {
                xtype: 'numberfield',
                minValue: 0
            };
            var grid = Ext.create('Ext.grid.Panel', {
                selType: 'cellmodel',
                renderTo: 'grid-summary',
                height: 580,
                plugins: [cellEditing],
                frame: true,
                title: '{{ indicator }}',
                store: store,
                iconCls: 'icon-user',
                features: [{
                    id: 'group',
                    ftype: 'groupingsummary',
                    groupHeaderTpl: '{name} aa',
                    hideGroupedHeader: true,
                    enableGroupingMenu: true
                },{
                    ftype: 'summary',
                    dock: 'bottom'
                }],
                split: true,
                columns: [{
                        text: 'Nro',
                        width: 30,
                        sortable: true,
                        locked: true,
                        renderer: function (v, meta, rec, rowIndex) {
                            return ++rowIndex;
                        }
                    },{
                        text: '{{ "pequiven.name"|trans({},"messages") }}',
                        flex: 1,
                        sortable: true,
                        variableRowHeight: true,
                        dataIndex: 'productName',
                        locked: true,
                        hideable: false,
                        summaryType: 'count',
                        summaryRenderer: function(value, summaryData, dataIndex) {
                            return ((value === 0 || value > 1) ? '(' + value + ' Products)' : '(1 Product)');
                        },
                    },{
                        text: '{{ 'pequiven_seip.cumulative'|trans }}',
                        locked: true,
                        columns: [
                            {
                                text: '{{ "pequiven.goals.abbr_planned"|trans({},"PequivenArrangementProgramBundle") }}',
                                dataIndex: 'totalPlan',
                                width: 50,
                            },
                            {
                                text: '{{ "pequiven.goals.abbr_real"|trans({},"PequivenArrangementProgramBundle") }}',
                                dataIndex: 'totalReal',
                                width: 50,
                            },
                            {
                                text: '{{ "pequiven.goals.percentaje"|trans({},"PequivenArrangementProgramBundle") }}',
                                dataIndex: 'percentaje',
                                width: 50,
                            }
                        ]
                    },{
                        text: '{{ 'pequiven_seip.form.dayX'|trans({'%x%': 1}) }}',
                        columns: [
                            {
                                text: '{{ "pequiven.goals.abbr_planned"|trans({},"PequivenArrangementProgramBundle") }}',
                                dataIndex: 'day1Plan',
                                width: widthColumnDays,
                                field: fieldTypeDayProperties
                            },
                            {
                                text: '{{ "pequiven.goals.abbr_real"|trans({},"PequivenArrangementProgramBundle") }}',
                                dataIndex: 'day1Real',
                                width: widthColumnDays,
                                field: fieldTypeDayProperties
                            }
                        ]
                    }
                ]
            });
        });
    </script>
{% endblock %}

{% block content %}
    aa
    <div id="grid-summary"></div>
{% endblock content %}